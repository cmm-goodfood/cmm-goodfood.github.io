openapi: 3.0.0
servers:
  - url: https://api.goodfood.fr/v1
    description: Default server
  - url: https://api.goodfood.fr/sandbox
    description: Sandbox server
info:
  title: GoodFood API
  description: |
    # Introduction
    Cette page est dédiée à la documentation de l'API REST de GoodFood. GoodFood est un réseau
    de restaurants franchisés qui proposent des prestations de restauration conventionnelle,
    de la vente à emporter et des prestations de livraison.

    Si vous pensez avoir trouvé un bug au niveau de l'API ou une erreur sur la documentation
    vous pouvez le reporter sur notre
    [outil de tracking d'issue](https://github.com/cmm-goodfood/cmm-goodfood.github.io/issues)
    ou nous contacter via notre adresse mail [contact@goodfood.fr](mailto:contact@goodfood.fr).

    # Versionnage
    L'API de GoodFood est versionnée et plusieurs versions peuvent être disponibles. Vous pouvez
    spécifier quelle version utiliser en l'incluant dans l'URL de la requête de la façon suivante
    `https://api.goodfood.fr/v{numéro_de_version}`.
    Si aucun numéro de version n'est spécifié, la version par défaut sera utilisée.

    ### Historique des versions
    | Version | Statut     | Défaut |
    |---------|------------|--------|
    | v1      | Disponible | Oui    |

    # Authentification et authorisation
    Certaines terminaisons de l'API nécessitent d'être authentifié. Pour obtenir un token
    il est nécessaire de contacter le support technique de GoodFood. Le token généré par le
    support devra être envoyé avec chaque requête nécessitant une authentification dans le
    header `Authorization` en type `Bearer`.

    Si une terminaison nécessite d'être authentifié mais aucun token n'est fournit ou le token
    est invalide, une réponse <span class="client-error">400 Unauthorized</span> sera envoyée.
    Dans le cas où la terminaison nécessite un rôle particulier que l'utilisateur actuel ne
    possède pas, le client recevra une erreur <span class="client-error">403 Forbidden</span>.

    ### Permissions
    Les permissions sont gérées par des roles, il y en a trois :

    | Roles       | Description                                              |
    |-------------|----------------------------------------------------------|
    | Client      | Voir et éditer son compte et passer des commandes        |
    | Restaurant  | Gestion des commandes, promotions et stock du restaurant |
    | Modérateur  | Gestion des utilisateurs et restaurants                  |

  version: 0.1.0
  contact:
    name: Support technique
    email: contact@goodfood.fr
    url: http://goodfood.fr/contact
security:
  - jwt_auth:
      - client
      - restaurant
      - moderator
tags:
  - name: Général
    description: Informations sur l'API
  - name: Gestion de compte
    description: Authentification
  - name: Utilisateurs
    description: Opérations sur les utilisateurs
  - name: Restaurants
    description: Opérations sur les restaurants
  - name: Commandes
    description: Opérations sur les commandes
  - name: Stock
    description: Opérations sur la gestion de stock
paths:
  /version:
    get:
      security: [ ]
      tags: [ "Général" ]
      summary: Version de l'API
      description: |
        Récupère les informations sur la version de l'API en précisant la version par défaut, la version
        utilisée et le statut de toutes les versions disponibles. Le statut d'une version peut avoir l'une
        des valeurs suivantes : `available`, `deprecated` ou `discontinued`.
      servers:
        - url: https://api.goodfood.fr/v1
          description: Default server
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  current:
                    type: integer
                    description: Version actuelle
                  default:
                    type: integer
                    description: Version par défaut
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        number:
                          type: integer
                          description: Numéro de version
                        status:
                          type: string
                          description: Statut de la version, peut être `disponible`, `déprécié` ou `abandonné`
                        default:
                          type: boolean
                          description: Si cette version est celle par défaut

  #
  # USER ACCOUNT MANAGEMENT
  #
  /token:
    post:
      tags: [ "Gestion de compte" ]
      security: [ ]
      summary: Génèrer un token
      description: |
        Génère un token JWT pour le compte fournit en paramètre. Le token généré sera valide
        pendant 24h et un nouveau token devra être demandé lors de l'expiration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        400: { $ref: "#/components/responses/Invalid" }
        401:
          description: Utilisateur ou mot de passe invalide
        403:
          description: l'utilisateur n'a pas le droit d'utiliser l'API
    delete:
      tags: [ "Gestion de compte" ]
      security: [ { jwt_auth: [ client, restaurant, moderator ] } ]
      summary: Révoquer un token
      description: Révoque le token renseigné dans le corps de la requête
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Token"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

  /users/reset:
    post:
      tags: [ "Gestion de compte" ]
      summary: Mot de passe perdu
      security: [ ]
      description: |
        Engage la procédure de réinitialisation de mot de passe en envoyant un email
        à l'utilisateur.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

    put:
      tags: [ "Gestion de compte" ]
      summary: Réinitialiser le mot de passe
      security: [ ]
      description: |
        Finalisation de la procédure de réinitialisation de mot de passe avec
        la saisie du nouveau mot de passe. Le nouveau mot de passe sera
        effectif directement après l'appel API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Token envoyé par mail à l'utilisateur
                  required: true
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

  #
  # USER RELATED ENDPOINTS
  #

  /users:
    get:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ moderator ] } ]
      summary: Liste des utilisateurs
      description: Par défaut les 500 premiers utilisateurs si aucun paramètre n'est renseigné
      parameters:
        - name: offset
          in: query
          description: Décalage à prendre dans la liste
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
        - name: limit
          in: query
          description: Nombre d'utilisateurs à envoyer
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 500
          required: false
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/User"
        400: { "$ref": "#/components/responses/Invalid" }
        404:
          description: Aucun utilisateur dans cet intervalle

    post:
      tags: [ "Utilisateurs" ]
      summary: Créér un utilisateur
      security: [ ]
      description: |
        Créé un compte utilisateur pouvant se connecter à l'application. Un email
        est ensuite envoyé à l'utilisateur afin que ce dernier confirme son inscription.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordlessUser"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/PasswordlessUser"
        400: { "$ref": "#/components/responses/Invalid" }

  /users/confirm:
    post:
      tags: [ "Utilisateurs" ]
      summary: Définir le mot de passe
      security: [ ]
      description: |
        Définit le mot de passe d'un compte utilisateur
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordlessUser"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/User"
        400: { "$ref": "#/components/responses/Invalid" }

  /users/{id}:
    get:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ client, restaurant, moderator ] } ]
      summary: Utilisateur par id
      parameters:
        - name: id
          in: path
          description: Id de l'utilisateur
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: Aucun utilisateur ne correspond à cet id

    patch:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ client, moderator ] } ]
      summary: Modifier un utilisateur
      description: |
        Modifie les données de l'utilisateur
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordlessUser"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/User"
        400: { "$ref": "#/components/responses/Invalid" }
        404: { "$ref": "#/components/responses/NotFound" }

    delete:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ moderator ] } ]
      summary: Supprimer un utilisateur
      description: |
        Supprimer un utilisateur. Si c'est l'utilisateur lui même qui demande la suppression,
        ce dernier recevra un mail pour confirmer l'action.
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        404: { "$ref": "#/components/responses/NotFound" }

  /users/search:
    get:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ restaurant, moderator ] } ]
      summary: Utilisateur par adresse email
      parameters:
        - name: email
          in: query
          description: Adresse email de l'utilisateur
          schema:
            type: string
          required: true
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404: { description: Aucun utilisateur ne correspond à cet email }

  #
  # RESTAURANT RELATED ENDPOINTS
  #

  /restaurants:
    get:
      tags: [ "Restaurants" ]
      security: [ ]
      summary: Liste des restaurants
      description: |
        Liste de tous les restaurants. Renvoie les 50 premiers restaurants par défaut
        si aucun paramètre n'est renseigné. Ne nécessite aucune permission.
      parameters:
        - name: offset
          in: query
          description: Décalage à prendre dans la liste
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
        - name: limit
          in: query
          description: Nombre de restaurants à envoyer
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          required: false
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/Restaurant"
        400: { "$ref": "#/components/responses/Invalid" }
        404:
          description: Aucun restaurant dans cet intervalle
    post:
      tags: [ "Restaurants" ]
      summary: Créér un restaurant
      security: [ { jwt_auth: [ moderator ] } ]
      description: |
        Créé un restaurant.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/User"
        400: { "$ref": "#/components/responses/Invalid" }

  /restaurants/{id}:
    get:
      tags: [ "Restaurants" ]
      security: [ ]
      summary: Restaurant par id
      parameters:
        - name: id
          in: path
          description: Id de l'utilisateur
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        404:
          description: Aucun utilisateur ne correspond à cet id
    patch:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ restaurant, moderator ] } ]
      summary: Modifier un restaurant
      description: |
        Modifie les données du restaurant
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/Restaurant"
        400: { "$ref": "#/components/responses/Invalid" }
        404: { "$ref": "#/components/responses/NotFound" }
    delete:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ moderator ] } ]
      summary: Supprimer un restaurant
      description: Supprime un restaurant
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        404: { "$ref": "#/components/responses/NotFound" }

  /restaurants/{restaurant}/products:
    post:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ restaurant, moderator ] } ]
      summary: Ajouter un produit
      description: Ajoute un produit au restaurant sélectionné
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

  /restaurants/{restaurant}/products/{product}:
    patch:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ restaurant, moderator ] } ]
      summary: Modifier un produit
      description: Modifie le produit du restaurant sélectionné
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
        - name: product
          in: path
          description: Produit concerné
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }
        404: { "$ref": "#/components/responses/NotFound" }

    delete:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ restaurant, moderator ] } ]
      summary: Supprimer produit
      description: Supprime le produit du restaurant sélectionné
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
        - name: product
          in: path
          description: Produit concerné
          schema:
            type: integer
          required: true
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        404: { "$ref": "#/components/responses/NotFound" }

  /restaurants/search:
    post:
      tags: [ "Restaurants" ]
      security: [ ]
      summary: Recherche de restaurant
      description: |
        Recherche un restaurant selon une chaine de caractère dans le titre, la description
        ou selon sa position. Tous les paramètres à la racine de l'objet donné dans le corps
        de la requête sont optionnels.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                search:
                  type: string
                  description: Recherche de nom, description...
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                      description: Latitude du restaurant
                      required: true
                    longitude:
                      type: number
                      description: Longitude du restaurant
                      required: true
                radius:
                  type: number
                  description: Rayon en kilomètres autour duquel chercher
                  required: false
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"

  #
  # ORDERS RELATED ENDPOINTS
  #

  /restaurant/{restaurant}/orders:
    get:
      tags: [ "Commandes" ]
      security: [ { jwt_auth: [ restaurant, moderator ] } ]
      summary: Liste des commandes
      description: Récupère la liste des commandes dans un restaurant
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
        - name: offset
          in: query
          description: Décalage à prendre dans la liste
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
        - name: limit
          in: query
          description: Nombre de commandes à envoyer
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 500
          required: false
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }
    post:
      tags: [ "Commandes" ]
      security: [ { jwt_auth: [ client ] } ]
      summary: Création d'une commande
      description: Création d'une commande par un utilisateur
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrder"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

  /orders/{number}:
    get:
      tags: [ "Commandes" ]
      security: [ { jwt_auth: [ client, restaurant ] } ]
      summary: Détails d'une commande
      description: Récupère le détail d'une commande
      parameters:
        - name: number
          in: path
          description: Numéro de commande
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        200:
          description: Numéro de commande
          content:
            application/json:
              schema:
                type: object
                properties:
                  number:
                    type: string
                    description: Numéro de la commande créée
        400: { "$ref": "#/components/responses/Invalid" }
    patch:
      tags: [ "Commandes" ]
      security: [ { jwt_auth: [ client ] } ]
      summary: Modification d'une commande
      description: Modification du contenu et du status d'une commande
      parameters:
        - name: number
          in: path
          description: Numéro de commande
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditOrder"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

components:
  securitySchemes:
    jwt_auth:
      type: apiKey
      name: Authentification JWT
      in: header
      flows:
        implicit:
          scopes:
            client: Voir et éditer son compte et passer des commandes
            restaurant: Gestion des commandes, promotions et stock du restaurant
            moderator: Gestion des utilisateurs et restaurants
  responses:
    SuccessEmpty:
      description: Succès
    Invalid:
      description: Contenu de la requête invalide
    NotFound:
      description: Ressource inexistante
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
          description: Adresse email
        password:
          type: string
          description: Mot de passe
    Token:
      type: object
      properties:
        token:
          type: string
          description: Contenu du token
    Id:
      type: integer
      format: int64
      readOnly: true

    Location:
      type: object
      properties:
        latitude:
          type: number
          description: Latitude du restaurant
        longitude:
          type: number
          description: Longitude du restaurant

    Address:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        number:
          type: integer
          description: Numéro de rue
          required: true
        street:
          type: string
          description: Rue (première ligne)
          required: true
        addition:
          type: string
          description: Rue (seconde ligne)
        city:
          type: string
          description: Identifiant unique de l'utilisateur
          required: true
        postcode:
          type: integer
          description: Code postal
          required: true

    BasicUser:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        firstname:
          type: string
          description: Prénom
        lastname:
          type: string
          description: Nom de famille

    User:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        email:
          type: string
          description: Adresse email de l'utilisateur
          required: true
        password:
          type: string
          description: Mot de passe de l'utilisateur
          writeOnly: true
          required: true
        firstname:
          type: string
          description: Prénom
        lastname:
          type: string
          description: Nom de famille
        address:
          $ref: "#/components/schemas/Address"

    PasswordlessUser:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        email:
          type: string
          description: Adresse email de l'utilisateur
          required: true
        firstname:
          type: string
          description: Prénom
          required: true
        lastname:
          type: string
          description: Nom de famille
          required: true
        address:
          $ref: "#/components/schemas/Address"

    SetPassword:
      type: object
      properties:
        email:
          type: string
          description: Adresse email de l'utilisateur
          required: true
        token:
          type: string
          description: Token de création de compte
          required: true
        password:
          type: string
          description: Mot de passe
          required: true

    Product:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        category:
          type: string
          description: Type de produit
          enum:
            - APPETIZER
            - DISH
            - DESERT
            - DRINK
        name:
          type: string
          description: Nom du produit
        description:
          type: string
          description: Description du produit
        price:
          type: number
          description: Prix du produit
        stock:
          type: integer
          description: Quantité en stock

    Order:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        restaurant:
          $ref: "#/components/schemas/Restaurant"
        user:
          $ref: "#/components/schemas/User"
        time:
          type: string
          description: Heure de la commande
        address:
          $ref: "#/components/schemas/Address"
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"

    CreateOrder:
      type: object
      properties:
        type:
          type: string
          description: Type de commande
          enum:
            - DELIVER
            - TAKEAWAY
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"

    EditOrder:
      type: object
      properties:
        type:
          type: string
          description: Type de commande
          enum:
            - DELIVER
            - TAKEAWAY
        status:
          type: string
          description: Status de la commande
          enum:
            - PREPARING
            - PREPARED
            - DELIVERING
            - TAKEN
            - DELIVERED
            - CANCELLED
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"

    Restaurant:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        name:
          type: string
          description: Adresse email de l'utilisateur
          required: true
        shortDescription:
          type: string
          description: Courte description du restaurant
          required: true
        description:
          type: string
          description: Description complète du restaurant
          required: true
        address:
          $ref: "#/components/schemas/Address"
        location:
          $ref: "#/components/schemas/Location"
        deliveryRadius:
          type: integer
          description: Rayon de livraison en kilomètres
          required: true
        products:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Product"
