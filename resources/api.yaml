openapi: 3.0.0
servers:
  - url: https://api.goodfood.fr/v1
    description: Default server
  - url: https://api.goodfood.fr/sandbox
    description: Sandbox server
info:
  title: GoodFood API
  description: |
    # Introduction
    Cette page est dédiée à la documentation de l'API REST de GoodFood. GoodFood est un réseau
    de restaurants franchisés qui proposent des prestations de restauration conventionnelle,
    de la vente à emporter et des prestations de livraison.

    Si vous pensez avoir trouvé un bug au niveau de l'API ou une erreur sur la documentation
    vous pouvez le reporter sur notre
    [outil de tracking d'issue](https://github.com/cmm-goodfood/cmm-goodfood.github.io/issues)
    ou nous contacter via notre adresse mail [contact@goodfood.fr](mailto:contact@goodfood.fr).

    # Versionnage
    L'API de GoodFood est versionnée et plusieurs versions peuvent être disponibles. Vous pouvez
    spécifier quelle version utiliser en l'incluant dans l'URL de la requête de la façon suivante
    `https://api.goodfood.fr/v{numéro_de_version}`.
    Si aucun numéro de version n'est spécifié, la version par défaut sera utilisée.

    ### Historique des versions
    | Version | Statut     | Défaut |
    |---------|------------|--------|
    | v1      | Disponible | Oui    |

    # Rate limiting
    ...

    # Authentification et authorisation
    Certaines terminaisons de l'API nécessitent d'être authentifié. Pour obtenir un token
    il est nécessaire de contacter le support technique de GoodFood. Le token généré par le
    support devra être envoyé avec chaque requête nécessitant une authentification dans le
    header `Authorization` en type `Bearer`.

    Si une terminaison nécessite d'être authentifié mais aucun token n'est fournit ou le token
    est invalide, une réponse <span class="client-error">400 Unauthorized</span> sera envoyée.
    Dans le cas où la terminaison nécessite un rôle particulier que l'utilisateur actuel ne
    possède pas, le client recevra une erreur <span class="client-error">403 Forbidden</span>.

    ### Permissions
    Les permissions avec le préfixe `is` concernent des comptes ayant le droit de gérer les
    informations qui leur sont liées, par exemple gérer les commandes qu"il reçoit pour un
    restaurant. Elles ne sont en général pas spécifié dans les permissions d'une terminaison.
    Le préfixe `read` autorise à lister et voir toutes les données dans cette
    catégorie, le préfixe `manage` permet d'éditer et dans certains cas supprimer des données
    et le préfixe `delete` autorise la suppression lorsque `manage` ne l'autorise pas.

    | Permission          | Valeur  | Description                                                |
    |---------------------|---------|------------------------------------------------------------|
    | `is:client`*        | 1 << 0  | Voir et éditer son compte et passer des commandes          |
    | `is:restaurant`**   | 1 << 1  | Gestion des commandes, promotions et stock du restaurant   |
    | `read:user`         | 1 << 2  | Lister et voir toutes les informations des utilisateurs    |
    | `manage:user`       | 1 << 3  | Edition de comptes utilisateurs                            |
    | `delete:user`       | 1 << 4  | Suppression de comptes utilisateurs                        |
    | `make:order`        | 1 << 5  | Passer des commandes et voir ses commandes                 |
    | `read:order`        | 1 << 6  | Lister et voir l'ensemble des commandes                    |
    | `manage:order`      | 1 << 7  | Annulation de commandes                                    |
    | `read:payment`      | 1 << 8  | Lister et voir l'ensemble des paiements                    |
    | `manage:payment`    | 1 << 9  | Annuler des paiements                                      |
    | `read:stock`        | 1 << 10 | Voir le stock de tous les restaurants                      |
    | `manage:stock`      | 1 << 11 | Gérer le stock de tous les restaurants                     |
    | `manage:restaurant` | 1 << 12 | Gérer les restaurants                                      |
    | `read:offer`        | 1 << 13 | Voir l'ensemble des promotions                             |
    | `manage:offer`      | 1 << 14 | Gérer les promotions                                       |

    \* : La permission `is:client` permet à l'utilisateur de voir, éditer et supprimer son propre
    compte, passer des commandes

    \*\* : La permission `is:restaurant` permet à l'utilisateur d'éditer son restaurant, de voir
    et gérer ses stocks, promotions et commandes mais aussi voir le détail des utilisateurs qui
    passent des commandes dans le restaurant.

  version: 0.1.0
  contact:
    name: Support technique
    email: contact@goodfood.fr
    url: http://goodfood.fr/contact
security:
  - jwt_auth:
      - is:client
      - is:restaurant
      - read:user
      - manage:user
      - delete:user
      - make:order
      - read:order
      - manage:order
      - read:payment
      - manage:payment
      - read:stock
      - manage:stock
      - manage:restaurant
tags:
  - name: Général
    description: Informations sur l'API
  - name: Gestion de compte
    description: Authentification
  - name: Utilisateurs
    description: Opérations sur les utilisateurs
  - name: Restaurants
    description: Opérations sur les restaurants
  - name: Commandes
    description: Opérations sur les commandes
  - name: Stock
    description: Opérations sur la gestion de stock
paths:
  /version:
    get:
      security: [ ]
      tags: [ "Général" ]
      summary: Version de l'API
      description: |
        Récupère les informations sur la version de l'API en précisant la version par défaut, la version
        utilisée et le statut de toutes les versions disponibles. Le statut d'une version peut avoir l'une
        des valeurs suivantes : `available`, `deprecated` ou `discontinued`.
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  current:
                    type: integer
                    description: Version actuelle
                  default:
                    type: integer
                    description: Version par défaut
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        number:
                          type: integer
                          description: Numéro de version
                        statut:
                          type: string
                          description: Statut de la version, peut être `disponible`, `déprécié` ou `abandonné`
                        default:
                          type: boolean
                          description: Si cette version est celle par défaut

  #
  # USER ACCOUNT MANAGEMENT
  #
  /token:
    post:
      tags: [ "Gestion de compte" ]
      security: [ ]
      summary: Génèrer un token
      description: |
        Génère un token JWT pour le compte fournit en paramètre. Le token généré sera valide
        pendant 24h et un nouveau token devra être demandé lors de l'expiration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        400: { $ref: "#/components/responses/Invalid" }
        401:
          description: Utilisateur ou mot de passe invalide
        403:
          description: l'utilisateur n'a pas le droit d'utiliser l'API
    delete:
      tags: [ "Gestion de compte" ]
      security: [ { jwt_auth: [ is:client, is:restaurant ] } ]
      summary: Révoquer un token
      description: Révoque le token renseigné dans le corps de la requête
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Token"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

  /user/reset:
    post:
      tags: [ "Gestion de compte" ]
      summary: Mot de passe perdu
      security: [ ]
      description: |
        Engage la procédure de réinitialisation de mot de passe en envoyant un email
        à l'utilisateur.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

    put:
      tags: [ "Gestion de compte" ]
      summary: Réinitialiser le mot de passe
      security: [ ]
      description: |
        Finalisation de la procédure de réinitialisation de mot de passe avec
        la saisie du nouveau mot de passe. Le nouveau mot de passe sera
        effectif directement après l'appel API.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Token envoyé par mail à l'utilisateur
                  required: true
                email:
                  type: string
                  required: true
                password:
                  type: string
                  required: true
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

  #
  # USER RELATED ENDPOINTS
  #

  /users:
    get:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ read:user ] } ]
      summary: Liste des utilisateurs
      description: Par défaut les 500 premiers utilisateurs si aucun paramètre n'est renseigné
      parameters:
        - name: offset
          in: query
          description: Décalage à prendre dans la liste
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
        - name: limit
          in: query
          description: Nombre d'utilisateurs à envoyer
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 500
          required: false
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/User"
        400: { "$ref": "#/components/responses/Invalid" }
        404:
          description: Aucun utilisateur dans cet intervalle

    post:
      tags: [ "Utilisateurs" ]
      summary: Créér un utilisateur
      security: [ ]
      description: |
        Créé un compte utilisateur pouvant se connecter à l'application. Un email
        est ensuite envoyé à l'utilisateur afin que ce dernier confirme son inscription.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/User"
        400: { "$ref": "#/components/responses/Invalid" }

  /user/{id}:
    get:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ read:user ] } ]
      summary: Utilisateur par id
      parameters:
        - name: id
          in: path
          description: Id de l'utilisateur
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: Aucun utilisateur ne correspond à cet id

    patch:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ manage:user ] } ]
      summary: Modifier un utilisateur
      description: |
        Modifie les données de l'utilisateur
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordlessUser"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/User"
        400: { "$ref": "#/components/responses/Invalid" }
        404: { "$ref": "#/components/responses/NotFound" }

    delete:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ delete:user ] } ]
      summary: Supprimer un utilisateur
      description: |
        Supprimer un utilisateur. Si c'est l'utilisateur lui même qui demande la suppression,
        ce dernier recevra un mail pour confirmer l'action.
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        404: { "$ref": "#/components/responses/NotFound" }

  /user/{email}:
    get:
      tags: [ "Utilisateurs" ]
      security: [ { jwt_auth: [ read:user ] } ]
      summary: Utilisateur par adresse email
      parameters:
        - name: email
          in: path
          description: Adresse email de l'utilisateur
          schema:
            type: string
          required: true
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404: { description: Aucun utilisateur ne correspond à cet email }

  #
  # RESTAURANT RELATED ENDPOINTS
  #

  /restaurants:
    get:
      tags: [ "Restaurants" ]
      security: [ ]
      summary: Liste des restaurants
      description: |
        Liste de tous les restaurants. Renvoie les 50 premiers restaurants par défaut
        si aucun paramètre n'est renseigné. Ne nécessite aucune permission.
      parameters:
        - name: offset
          in: query
          description: Décalage à prendre dans la liste
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
        - name: limit
          in: query
          description: Nombre de restaurants à envoyer
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          required: false
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/Restaurant"
        400: { "$ref": "#/components/responses/Invalid" }
        404:
          description: Aucun restaurant dans cet intervalle
    post:
      tags: [ "Restaurants" ]
      summary: Créér un restaurant
      security: [ { jwt_auth: [ "manage:restaurant" ] } ]
      description: |
        Créé un restaurant.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/User"
        400: { "$ref": "#/components/responses/Invalid" }

  /restaurant/{id}:
    get:
      tags: [ "Restaurants" ]
      security: [ ]
      summary: Restaurant par id
      parameters:
        - name: id
          in: path
          description: Id de l'utilisateur
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        404:
          description: Aucun utilisateur ne correspond à cet id
    patch:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ manage:restaurant ] } ]
      summary: Modifier un restaurant
      description: |
        Modifie les données du restaurant
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  - $ref: "#/components/schemas/Restaurant"
        400: { "$ref": "#/components/responses/Invalid" }
        404: { "$ref": "#/components/responses/NotFound" }
    delete:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ manage:restaurant ] } ]
      summary: Supprimer un restaurant
      description: Supprime un restaurant
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        404: { "$ref": "#/components/responses/NotFound" }

  /restaurants/{restaurant}/products:
    post:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ manage:restaurant ] } ]
      summary: Ajouter un produit
      description: Ajoute un produit au restaurant sélectionné
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

  /restaurants/{restaurant}/products/{product}:
    patch:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ manage:restaurant ] } ]
      summary: Modifier un produit
      description: Modifie le produit du restaurant sélectionné
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
        - name: product
          in: path
          description: Produit concerné
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }
        404: { "$ref": "#/components/responses/NotFound" }

    delete:
      tags: [ "Restaurants" ]
      security: [ { jwt_auth: [ manage:restaurant ] } ]
      summary: Supprimer produit
      description: Supprime le produit du restaurant sélectionné
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
        - name: product
          in: path
          description: Produit concerné
          schema:
            type: integer
          required: true
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        404: { "$ref": "#/components/responses/NotFound" }

  /restaurants/search:
    post:
      tags: [ "Restaurants" ]
      security: [ ]
      summary: Recherche de restaurant
      description: |
        Recherche un restaurant selon une chaine de caractère dans le titre, la description
        ou selon sa position. Tous les paramètres à la racine de l'objet donné dans le corps
        de la requête sont optionnels.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                search:
                  type: string
                  description: Recherche de nom, description...
                location:
                  type: object
                  properties:
                    latitude:
                      type: number
                      description: Latitude du restaurant
                      required: true
                    longitude:
                      type: number
                      description: Longitude du restaurant
                      required: true
                    radius:
                      type: number
                      description: Rayon en kilomètres autour duquel chercher
                      required: false
      responses:
        200:
          description: Succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"

  #
  # ORDERS RELATED ENDPOINTS
  #

  /order/{restaurant}:
    get:
      tags: [ "Commandes" ]
      security: [ { jwt_auth: [ read:order ] } ]
      summary: Liste des commandes
      description: Récupère la liste des commandes dans un restaurant
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Order"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }
    post:
      tags: [ "Commandes" ]
      security: [ { jwt_auth: [] } ]
      summary: Création d'une commande
      description: Création d'une commande par un utilisateur
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Product"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

  /order/{number}:
    get:
      tags: [ "Commandes" ]
      security: [ { jwt_auth: [ read:order ] } ]
      summary: Détails d'une commande
      description: Récupère la liste des commandes dans un restaurant
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Order"
      responses:
        200:
          description: Numéro de commande
          content:
            application/json:
              schema:
                type: object
                properties:
                  number:
                    type: string
                    description: Numéro de la commande créée
        400: { "$ref": "#/components/responses/Invalid" }
  #
  # STOCK RELATED ENDPOINTS
  #

  /stock/{restaurant}:
    get:
      tags: [ "Stock" ]
      security: [ { jwt_auth: [ read:stock ] } ]
      summary: Liste du stock
      description: Récupère le stock d'un restaurant
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Product"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }
    post:
      tags: [ "Stock" ]
      security: [ { jwt_auth: [ read:stock ] } ]
      summary: Mise à jour du stock
      description: Mise à jour de la quantité d'un ou plusieurs produits dans le stock
      parameters:
        - name: restaurant
          in: path
          description: Restaurant concerné
          schema:
            type: integer
          required: true
        - name: updated_products
          in: body
          description: Produits à mettre à jour
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Product"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Product"
      responses:
        200: { "$ref": "#/components/responses/SuccessEmpty" }
        400: { "$ref": "#/components/responses/Invalid" }

components:
  securitySchemes:
    jwt_auth:
      type: apiKey
      name: Authentification JWT
      in: header
      flows:
        implicit:
          scopes:
            is:client: Voir et éditer son compte et passer des commandes
            is:restaurant: Gestion des commandes, promotions et stock du restaurant
            read:user: Lister et voir toutes les informations des utilisateurs
            manage:user: Edition de comptes utilisateurs
            delete:user: Suppression de comptes utilisateurs
            make:order: Passer des commandes et voir ses commandes
            read:order: Lister et voir l'ensemble des commandes
            manage:order: Annulation de commandes
            read:payment: Lister et voir l'ensemble des paiements
            manage:payment: Annuler des paiements
            read:stock: Voir le stock de tous les restaurants
            manage:stock: Gérer le stock de tous les restaurants
            manage:restaurant: Gérer les restaurants
            read:offer: Voir l'ensemble des promotions
            manage:offer: Gérer les promotions
  responses:
    SuccessEmpty:
      description: Succès
    Invalid:
      description: Contenu de la requête invalide
    NotFound:
      description: Ressource inexistante
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
          description: Nom d'utilisateur
        password:
          type: string
          description: Mot de passe
    Token:
      type: object
      properties:
        token:
          type: string
          description: Contenu du token
    Id:
      type: integer
      format: int64
      readOnly: true

    Location:
      type: object
      properties:
        latitude:
          type: number
          description: Latitude du restaurant
        longitude:
          type: number
          description: Longitude du restaurant

    Address:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        number:
          type: integer
          description: Numéro de rue
          required: true
        street1:
          type: string
          description: Rue (première ligne)
          required: true
        street2:
          type: string
          description: Rue (seconde ligne)
        city:
          type: string
          description: Identifiant unique de l'utilisateur
          required: true
        postcode:
          type: integer
          description: Code postal
          required: true

    BasicUser:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        firstname:
          type: string
          description: Prénom
        lastname:
          type: string
          description: Nom de famille

    User:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        email:
          type: string
          description: Adresse email de l'utilisateur
          required: true
        password:
          type: string
          description: Mot de passe de l'utilisateur
          writeOnly: true
          required: true
        firstname:
          type: string
          description: Prénom
        lastname:
          type: string
          description: Nom de famille
        registered:
          type: string
          description: Date d'inscription
        address:
          $ref: "#/components/schemas/Address"
        api_permissions:
          type: integer
          description: PErmissions d'utilisation de l'API

    PasswordlessUser:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        email:
          type: string
          description: Adresse email de l'utilisateur
          required: true
        firstname:
          type: string
          description: Prénom
          required: true
        lastname:
          type: string
          description: Nom de famille
          required: true
        registered:
          type: string
          description: Date d'inscription
        address:
          type: array
          description: Adresses de l'utilisateur
          items:
            $ref: "#/components/schemas/Address"
        api_permissions:
          type: integer
          description: The permissions regarding API use

    Product:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        category:
          type: string
          description: Type de produit
          enum:
            - appetizer
            - dish
            - dessert
            - drink
        name:
          type: string
          description: Nom du produit
        description:
          type: string
          description: Description du produit
        price:
          type: number
          description: Prix du produit
        quantity:
          type: integer
          description: Quantité en stock

    Order:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        restaurant:
          $ref: "#/components/schemas/Restaurant"
          readOnly: true
        user:
          $ref: "#/components/schemas/User"
        time:
          type: string
          description: Heure de la commande
        address:
          $ref: "#/components/schemas/Address"

    Restaurant:
      type: object
      properties:
        id: { $ref: "#/components/schemas/Id" }
        name:
          type: string
          description: Adresse email de l'utilisateur
          required: true
        shortDescription:
          type: string
          description: Courte description du restaurant
          required: true
        description:
          type: string
          description: Description complète du restaurant
          required: true
        address:
          $ref: "#/components/schemas/Address"
        location:
          $ref: "#/components/schemas/Location"
        delivery_radius:
          type: integer
          required: true
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
